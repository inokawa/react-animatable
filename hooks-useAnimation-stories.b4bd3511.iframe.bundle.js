/*! For license information please see hooks-useAnimation-stories.b4bd3511.iframe.bundle.js.LICENSE.txt */
"use strict";(self.webpackChunkreact_animatable=self.webpackChunkreact_animatable||[]).push([[732],{"./stories/hooks/useAnimation.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Bars:()=>Bars,Countdown:()=>Countdown,Mouse:()=>Mouse,Path:()=>Path,Playground:()=>Playground,Sequence:()=>Sequence,ThreeDimentional:()=>ThreeDimentional,Toggle:()=>Toggle,Wave:()=>Wave,__namedExportsOrder:()=>__namedExportsOrder,default:()=>useAnimation_stories});var react=__webpack_require__("./node_modules/react/index.js"),src=__webpack_require__("./src/index.ts");function o(f){return r=>{f.forEach((n=>{"function"==typeof n?n(r):null!=n&&(n.current=r)}))}}const useAnimation_stories={parameters:{storySource:{source:'import { StoryObj } from "@storybook/react";\nimport React, { useCallback, useEffect, useState } from "react";\nimport {\n  AnimationOptions,\n  TypedEasing,\n  TypedKeyframe,\n  useAnimation,\n} from "../../src";\nimport { mergeRefs } from "react-merge-refs";\n\nconst debounce = <T extends (...args: any[]) => void>(fn: T, ms: number) => {\n  let id: NodeJS.Timeout | null = null;\n  return (...args: Parameters<T>) => {\n    if (id != null) {\n      clearTimeout(id);\n    }\n    id = setTimeout(() => {\n      id = null;\n      fn(...args);\n    }, ms);\n  };\n};\n\nexport default { component: useAnimation };\n\nexport const Playground: StoryObj = {\n  render: () => {\n    const [duration, setDuration] = useState(1000);\n    const [iteration, setIteration] = useState(2);\n    const [direction, setDirection] = useState<PlaybackDirection>("alternate");\n    const [easing, setEasing] = useState<TypedEasing>("cubic-bezier");\n    const [cubicBezierValues, setCubicBezierValues] = useState<\n      [number, number, number, number]\n    >([0.65, 0, 0.35, 1]);\n    const [stepsValues, setStepsValues] = useState<[number, string]>([\n      20,\n      "end",\n    ]);\n    const [delay, setDelay] = useState(0);\n    const [endDelay, setEndDelay] = useState(0);\n\n    const animate = useAnimation(\n      [\n        { transform: "translateX(0px)" },\n        {\n          transform: "translateX(100px) scale(2.0)",\n          fill: "red",\n        },\n      ],\n      {\n        duration: duration,\n        easing:\n          easing === "cubic-bezier"\n            ? `cubic-bezier(${cubicBezierValues.join(",")})`\n            : easing === "steps"\n            ? `steps(${stepsValues.join(",")})`\n            : easing,\n        direction: direction,\n        iterations: iteration,\n        delay,\n        endDelay,\n      }\n    );\n\n    useEffect(() => {\n      animate.play();\n    }, [\n      duration,\n      easing,\n      cubicBezierValues,\n      stepsValues,\n      iteration,\n      direction,\n      delay,\n    ]);\n\n    return (\n      <div>\n        <svg width={600} height={300} viewBox="0 0 600 300">\n          <g transform="translate(100, 100)">\n            <g ref={animate} fontSize="24px" fill="dimgray">\n              <text>Hello world</text>\n            </g>\n          </g>\n        </svg>\n        <div>\n          <button onClick={() => animate.play()}>play</button>\n          <button onClick={animate.pause}>pause</button>\n          <button onClick={animate.reverse}>reverse</button>\n          <button onClick={animate.finish}>finish</button>\n        </div>\n        <div>\n          <label>\n            duration:\n            <input\n              type="number"\n              min={0}\n              value={duration}\n              onChange={(e) => {\n                setDuration(Number(e.target.value));\n              }}\n            />\n            ms\n          </label>\n        </div>\n        <div>\n          <label>\n            iteration:\n            <input\n              type="number"\n              min={1}\n              value={iteration}\n              onChange={(e) => {\n                setIteration(Number(e.target.value));\n              }}\n            />\n          </label>\n        </div>\n        <div>\n          easing:\n          {["linear", "ease", "ease-in", "ease-out", "ease-in-out"].map((v) => (\n            <label key={v}>\n              <input\n                type="radio"\n                value={v}\n                checked={easing === v}\n                onChange={(e) => {\n                  setEasing(e.target.value as TypedEasing);\n                }}\n              />\n              {v}\n            </label>\n          ))}\n          <label>\n            <input\n              type="radio"\n              value="cubic-bezier"\n              checked={easing.indexOf("cubic-bezier") === 0}\n              onChange={(e) => {\n                setEasing(e.target.value as TypedEasing);\n              }}\n            />\n            cubic-bezier(\n            {cubicBezierValues\n              .map((v, i) => (\n                <input\n                  key={i}\n                  value={v}\n                  type="number"\n                  step={0.01}\n                  min={0}\n                  max={1}\n                  onChange={(e) => {\n                    setEasing("cubic-bezier");\n                    setCubicBezierValues((prev) => {\n                      const next: [number, number, number, number] = [...prev];\n                      next[i] = Number(e.target.value);\n                      return next;\n                    });\n                  }}\n                />\n              ))\n              .reduce((acc, v, i) => {\n                acc.push(v);\n                if (i !== cubicBezierValues.length - 1) {\n                  acc.push(",");\n                }\n                return acc;\n              }, [] as React.ReactNode[])}\n            )\n          </label>\n          <label>\n            <input\n              type="radio"\n              value="steps"\n              checked={easing.indexOf("steps") === 0}\n              onChange={(e) => {\n                setEasing(e.target.value as TypedEasing);\n              }}\n            />\n            steps(\n            {\n              <input\n                type="number"\n                step={1}\n                min={1}\n                value={stepsValues[0]}\n                onChange={(e) => {\n                  setEasing("steps");\n                  setStepsValues((prev) => [Number(e.target.value), prev[1]]);\n                }}\n              />\n            }\n            ,\n            <select\n              value={stepsValues[1]}\n              onChange={(e) => {\n                setEasing("steps");\n                setStepsValues((prev) => [prev[0], e.target.value]);\n              }}\n            >\n              {[\n                "jump-start",\n                "jump-end",\n                "jump-none",\n                "jump-both",\n                "start",\n                "end",\n              ].map((v) => (\n                <option key={v} value={v}>\n                  {v}\n                </option>\n              ))}\n            </select>\n            )\n          </label>\n        </div>\n        <div>\n          direction:\n          {["normal", "reverse", "alternate", "alternate-reverse"].map((v) => (\n            <label key={v}>\n              <input\n                type="radio"\n                value={v}\n                checked={direction === v}\n                onChange={(e) => {\n                  setDirection(e.target.value as PlaybackDirection);\n                }}\n              />\n              {v}\n            </label>\n          ))}\n        </div>\n        <div>\n          <label>\n            delay:\n            <input\n              type="number"\n              min={0}\n              value={delay}\n              onChange={(e) => {\n                setDelay(Number(e.target.value));\n              }}\n            />\n            ms\n          </label>\n        </div>\n        <div>\n          <label>\n            endDelay:\n            <input\n              type="number"\n              min={0}\n              value={endDelay}\n              onChange={(e) => {\n                setEndDelay(Number(e.target.value));\n              }}\n            />\n            ms\n          </label>\n        </div>\n        <div>\n          <label>\n            time:\n            <input\n              type="range"\n              defaultValue="0"\n              min={0}\n              max={100}\n              onChange={(e) => {\n                animate.setTime((end) => end * (Number(e.target.value) / 100));\n              }}\n            />\n          </label>\n        </div>\n        <div>\n          <label>\n            playback rate:\n            <input\n              type="number"\n              min={-100}\n              max={100}\n              defaultValue={1}\n              onChange={(e) => {\n                animate.setPlaybackRate(Number(e.target.value));\n              }}\n            />\n          </label>\n        </div>\n      </div>\n    );\n  },\n};\n\nconst Bar = ({\n  value,\n  i,\n  height,\n  keep,\n}: {\n  value: number;\n  i: number;\n  height: number;\n  keep: boolean;\n}) => {\n  const target: TypedKeyframe = {\n    height: `${value}px`,\n    transform: `translateY(-${value}px)`,\n    opacity: String(1 - i * 0.025),\n  };\n  const animate = useAnimation(\n    keep\n      ? (prev) => [\n          {\n            height: prev.height,\n            transform: prev.transform,\n            opacity: prev.opacity,\n          },\n          target,\n        ]\n      : [target],\n    { duration: 150, easing: "ease-out", delay: i * 100 }\n  );\n\n  useEffect(() => {\n    animate.play();\n  }, [value, keep]);\n\n  return (\n    <rect\n      ref={animate}\n      x={i * 20}\n      y={height}\n      width={18}\n      height={0}\n      opacity={target.opacity}\n      fill="steelblue"\n    />\n  );\n};\n\nexport const Bars: StoryObj = {\n  render: () => {\n    const init = () =>\n      Array.from({ length: 30 }).map(() => 300 * Math.random() ** 2);\n    const [rects, setRects] = useState(init);\n    const [keep, setKeep] = useState(false);\n\n    const width = 800;\n    const height = 400;\n    const margin = 10;\n    const maxBarHeight = height - margin * 2;\n\n    const refresh = () => setRects(init());\n\n    return (\n      <>\n        <div>\n          <button onClick={refresh}>refresh</button>\n          <label>\n            <input\n              type="checkbox"\n              checked={keep}\n              onChange={(e) => {\n                setKeep(e.target.checked);\n                refresh();\n              }}\n            />\n            keep\n          </label>\n        </div>\n        <div>\n          <svg width={width} height={height}>\n            <g transform={`translate(${margin},${margin})`}>\n              {rects.map((v, i) => (\n                <Bar\n                  key={i}\n                  i={i}\n                  value={v}\n                  height={maxBarHeight}\n                  keep={keep}\n                />\n              ))}\n            </g>\n          </svg>\n        </div>\n      </>\n    );\n  },\n};\n\nexport const Mouse: StoryObj = {\n  render: () => {\n    const rotate = useAnimation(\n      [\n        { transform: "rotate(0deg)", borderRadius: "1rem" },\n        { transform: "rotate(360deg)", borderRadius: "50%" },\n        { transform: "rotate(720deg)", borderRadius: "1rem" },\n      ],\n      {\n        duration: 1000,\n        iterations: Infinity,\n        easing: "ease-in-out",\n      }\n    );\n    const move = useAnimation<{ x: number; y: number }>(\n      (prev, pos) => [\n        { transform: prev.transform },\n        { transform: `translate(${pos.x}px, ${pos.y}px)` },\n      ],\n      {\n        duration: 400,\n        easing: "ease-in-out",\n      }\n    );\n\n    useEffect(() => {\n      rotate.play();\n\n      const onPointerMove = debounce((e: PointerEvent) => {\n        move.play({ args: { x: e.clientX, y: e.clientY } });\n      }, 100);\n      window.addEventListener("pointermove", onPointerMove);\n      return () => {\n        window.removeEventListener("pointermove", onPointerMove);\n      };\n    }, []);\n\n    return (\n      <div>\n        <div>Move mouse cursor.</div>\n        <div ref={move}>\n          <div\n            ref={rotate}\n            style={{\n              position: "fixed",\n              border: "solid 0.1rem #135569",\n              height: "6rem",\n              width: "6rem",\n              top: "-3rem",\n              left: "-3rem",\n            }}\n          />\n        </div>\n      </div>\n    );\n  },\n};\n\nexport const Toggle: StoryObj = {\n  render: () => {\n    const animate = useAnimation(\n      { transform: "translate3d(400px, 0, 0)" },\n      { duration: 800, easing: "ease-in-out" }\n    );\n\n    useEffect(() => {\n      animate.play();\n    }, [animate]);\n\n    return (\n      <div>\n        <button onClick={animate.reverse}>Toggle</button>\n        <div className="rail">\n          <div ref={animate} className="block" />\n        </div>\n        <style>\n          {`\n.rail {\n  border-radius: 4px;\n  background-color: rgb(240, 240, 232);\n  position: relative;\n  margin: 5px 3px 10px;\n  width: 450px;\n  height: 50px;\n}\n.block {\n  position: absolute;\n  width: 50px;\n  height: 50px;\n  border-radius: 4px;\n  background-color: rgb(130, 181, 198);\n}\n`}\n        </style>\n      </div>\n    );\n  },\n};\n\nexport const Path: StoryObj = {\n  render: () => {\n    const animate = useAnimation(\n      [\n        { d: "path(\'M50,50L150,50L150,150L50,150z\')" },\n        { d: "path(\'M100,30L170,170L30,170L30,170z\')" },\n      ],\n      {\n        duration: 1000,\n        easing: "ease-in-out",\n        iterations: Infinity,\n        direction: "alternate",\n      }\n    );\n\n    useEffect(() => {\n      animate.play();\n    }, []);\n\n    const width = 400;\n    const height = 300;\n\n    return (\n      <svg width={width} height={height} viewBox={`0 0 ${width} ${height}`}>\n        <path ref={animate} fill="orange" />\n      </svg>\n    );\n  },\n};\n\nexport const ThreeDimentional: StoryObj = {\n  render: () => {\n    const [pos, setPos] = useState({ x: 1, y: 1 });\n    const animate = useAnimation(\n      { transform: `rotate3d(${pos.y / 100}, ${pos.x / 100}, 0, 360deg)` },\n      {\n        duration: 1000,\n        iterations: Infinity,\n      }\n    );\n\n    useEffect(() => {\n      animate.play();\n    }, [pos]);\n\n    useEffect(() => {\n      const onPointerMove = (e: PointerEvent) => {\n        setPos({ x: e.clientX, y: e.clientY });\n      };\n      window.addEventListener("pointermove", onPointerMove);\n      return () => {\n        window.removeEventListener("pointermove", onPointerMove);\n      };\n    }, []);\n\n    return (\n      <>\n        <div\n          ref={animate}\n          style={{\n            width: 100,\n            height: 100,\n            margin: 100,\n            transformStyle: "preserve-3d",\n          }}\n        >\n          <div className="face front" />\n          <div className="face back" />\n          <div className="face right" />\n          <div className="face left" />\n          <div className="face top" />\n          <div className="face bottom" />\n        </div>\n        <style>\n          {`\n            .face {\n              display: flex;\n              align-items: center;\n              justify-content: center;\n              width: 100%;\n              height: 100%;\n              position: absolute;\n              backface-visibility: inherit;\n              font-size: 60px;\n              color: #fff;\n            }\n            .front {\n              background: rgba(90,90,90,.7);\n              transform: translateZ(50px);\n            }\n            .back {\n              background: rgba(0,210,0,.7);\n              transform: rotateY(180deg) translateZ(50px);\n            }\n            .right {\n              background: rgba(210,0,0,.7);\n              transform: rotateY(90deg) translateZ(50px);\n            }\n            .left {\n              background: rgba(0,0,210,.7);\n              transform: rotateY(-90deg) translateZ(50px);\n            }\n            .top {\n              background: rgba(210,210,0,.7);\n              transform: rotateX(90deg) translateZ(50px);\n            }\n            .bottom {\n              background: rgba(210,0,210,.7);\n              transform: rotateX(-90deg) translateZ(50px);\n            }\n            `}\n        </style>\n      </>\n    );\n  },\n  name: "3D",\n};\n\nexport const Sequence: StoryObj = {\n  render: () => {\n    const animate = useAnimation<string>(\n      (prev, color) => [{ fill: prev.fill }, { fill: color }],\n      { duration: 600, easing: "ease-out" }\n    );\n\n    const onClickAll = useCallback(async () => {\n      try {\n        await animate.play({ args: "red" }).waitFor("finish");\n        await animate.play({ args: "blue" }).waitFor("finish");\n        await animate.play({ args: "green" }).waitFor("finish");\n      } catch (e) {\n        // ignore uncaught promise error\n      }\n    }, []);\n\n    useEffect(() => {\n      onClickAll();\n    }, []);\n\n    return (\n      <div>\n        <svg width={150} height={150}>\n          <path\n            ref={animate}\n            d="M 10,30 A 20,20 0,0,1 50,30 A 20,20 0,0,1 90,30 Q 90,60 50,90 Q 10,60 10,30 z"\n          />\n        </svg>\n        <div>\n          <button\n            onClick={() => {\n              animate.play({ args: "red" });\n            }}\n          >\n            Red\n          </button>\n          <button\n            onClick={() => {\n              animate.play({ args: "blue" });\n            }}\n          >\n            Blue\n          </button>\n          <button\n            onClick={() => {\n              animate.play({ args: "green" });\n            }}\n          >\n            Green\n          </button>\n          <button onClick={onClickAll}>All</button>\n        </div>\n      </div>\n    );\n  },\n};\n\nconst WavedRect = ({ i }: { i: number }) => {\n  const baseTiming: AnimationOptions = {\n    easing: "ease-in-out",\n    iterations: Infinity,\n    direction: "alternate",\n    delay: i * 98,\n  };\n  const move = useAnimation(\n    [\n      { transform: "translateY(0) scaleX(.8)" },\n      { transform: "translateY(95vh) scaleX(1)" },\n    ],\n    { ...baseTiming, duration: 2500 }\n  );\n  const opacity = useAnimation([{ opacity: 1 }, { opacity: 0 }], {\n    ...baseTiming,\n    duration: 2000,\n  });\n  const color = useAnimation(\n    [{ backgroundColor: "rgb(239, 239, 255)" }, { backgroundColor: "#e4c349" }],\n    { ...baseTiming, duration: 3000 }\n  );\n\n  useEffect(() => {\n    move.play();\n    opacity.play();\n    color.play();\n  }, []);\n\n  return (\n    <div\n      ref={mergeRefs([move, opacity, color])}\n      style={{\n        width: "5vw",\n        height: "2.5vh",\n        background: "#efefff",\n        borderRadius: "1vh",\n      }}\n    />\n  );\n};\n\nexport const Wave: StoryObj = {\n  render: () => {\n    const [rects] = useState(() => Array.from({ length: 20 }).map((_, i) => i));\n\n    return (\n      <div\n        style={{\n          background: "#e45349",\n          width: "100vw",\n          height: "100vh",\n          display: "flex",\n          justifyContent: "center",\n        }}\n      >\n        {rects.map((i) => (\n          <WavedRect key={i} i={i} />\n        ))}\n      </div>\n    );\n  },\n};\n\nexport const Countdown: StoryObj = {\n  render: () => {\n    const [count, setCount] = useState(10);\n    const countAnimation = useAnimation(\n      [\n        { opacity: 1, transform: "scale(.6)" },\n        { opacity: 0.5, transform: "scale(1)" },\n      ],\n      {\n        duration: 500,\n        easing: "linear",\n        delay: 0,\n        iterations: 1000,\n        direction: "alternate",\n      }\n    );\n    const boomAnimation = useAnimation(\n      [\n        {\n          opacity: 0,\n          transform: "scale(.01) rotate(0deg)",\n          color: "white",\n          offset: 0,\n        },\n        {\n          opacity: 1,\n          transform: "scale(6) rotate(360deg)",\n          color: "orange",\n          offset: 0.8,\n        },\n        {\n          opacity: 1,\n          transform: "scale(1) rotate(720deg)",\n          color: "white",\n          offset: 1,\n        },\n      ],\n      {\n        duration: 2000,\n        easing: "ease-out",\n        delay: 0,\n        iterations: 1,\n      }\n    );\n\n    useEffect(() => {\n      countAnimation.play();\n      let startCount = count;\n\n      const id = setInterval(() => {\n        startCount -= 1;\n        setCount((p) => p - 1);\n\n        if (startCount > 0) {\n          countAnimation.setPlaybackRate((prev) => Math.min(prev * 1.15, 6));\n        } else {\n          clearInterval(id);\n          boomAnimation.play();\n        }\n      }, 1000);\n\n      return () => {\n        clearInterval(id);\n      };\n    }, []);\n    return (\n      <div\n        style={{\n          background: "gray",\n          width: 400,\n          height: 400,\n          display: "flex",\n          alignItems: "center",\n          justifyContent: "center",\n        }}\n      >\n        <span\n          ref={mergeRefs([countAnimation, boomAnimation])}\n          style={{ color: "white", fontSize: 64, fontWeight: "bold" }}\n        >\n          {count}\n        </span>\n      </div>\n    );\n  },\n};\n\n// const Block = ({ i, length: n }: { i: number; length: number }) => {\n//   const timing: AnimationOptions = {\n//     duration: 250,\n//   };\n//   const one = useAnimation(\n//     [{ backgroundColor: "#eee" }, { backgroundColor: "steelblue" }],\n//     { ...timing, endDelay: 1000 }\n//   );\n//   const two = useAnimation(\n//     [{ backgroundColor: "steelblue" }, { backgroundColor: "orange" }],\n//     { ...timing, endDelay: 1000 }\n//   );\n//   const three = useAnimation(\n//     [{ backgroundColor: "orange" }, { backgroundColor: "#eee" }],\n//     { ...timing, endDelay: n }\n//   );\n\n//   useEffect(() => {\n//     one.cancel();\n//     two.cancel();\n//     three.cancel();\n//     const run = async () => {\n//       try {\n//         await one.play().waitFor("finish");\n//         one.cancel();\n//         await two.play().waitFor("finish");\n//         two.cancel();\n//         await three.play().waitFor("finish");\n//         three.cancel();\n//         run();\n//       } catch (e) {\n//         // ignore uncaught promise error\n//       }\n//     };\n//     setTimeout(run, i + (Math.random() * n) / 4);\n//   }, []);\n\n//   return (\n//     <div\n//       ref={mergeRefs([one, two, three])}\n//       style={{\n//         width: 10,\n//         height: 10,\n//         margin: " 1px 0 0 1px",\n//         float: "left",\n//         background: "#eee",\n//         display: "inline-block",\n//       }}\n//     />\n//   );\n// };\n\n// export const Chained: StoryObj = {\n//   render: () => {\n//     const length = 4002;\n//     return (\n//       <div style={{ maxWidth: 960 }}>\n//         {Array.from({ length: length }).map((_, i) => (\n//           <Block key={i} i={i} length={length} />\n//         ))}\n//       </div>\n//     );\n//   },\n// };\n',locationsMap:{playground:{startLoc:{col:36,line:26},endLoc:{col:1,line:293},startBody:{col:36,line:26},endBody:{col:1,line:293}},bars:{startLoc:{col:30,line:342},endLoc:{col:1,line:390},startBody:{col:30,line:342},endBody:{col:1,line:390}},mouse:{startLoc:{col:31,line:392},endLoc:{col:1,line:448},startBody:{col:31,line:392},endBody:{col:1,line:448}},toggle:{startLoc:{col:32,line:450},endLoc:{col:1,line:489},startBody:{col:32,line:450},endBody:{col:1,line:489}},path:{startLoc:{col:30,line:491},endLoc:{col:1,line:519},startBody:{col:30,line:491},endBody:{col:1,line:519}},"three-dimentional":{startLoc:{col:42,line:521},endLoc:{col:1,line:607},startBody:{col:42,line:521},endBody:{col:1,line:607}},sequence:{startLoc:{col:34,line:609},endLoc:{col:1,line:665},startBody:{col:34,line:609},endBody:{col:1,line:665}},wave:{startLoc:{col:30,line:709},endLoc:{col:1,line:729},startBody:{col:30,line:709},endBody:{col:1,line:729}},countdown:{startLoc:{col:35,line:731},endLoc:{col:1,line:816},startBody:{col:35,line:731},endBody:{col:1,line:816}}}}},component:src.useAnimation},Playground={render:()=>{const[duration,setDuration]=(0,react.useState)(1e3),[iteration,setIteration]=(0,react.useState)(2),[direction,setDirection]=(0,react.useState)("alternate"),[easing,setEasing]=(0,react.useState)("cubic-bezier"),[cubicBezierValues,setCubicBezierValues]=(0,react.useState)([.65,0,.35,1]),[stepsValues,setStepsValues]=(0,react.useState)([20,"end"]),[delay,setDelay]=(0,react.useState)(0),[endDelay,setEndDelay]=(0,react.useState)(0),animate=(0,src.useAnimation)([{transform:"translateX(0px)"},{transform:"translateX(100px) scale(2.0)",fill:"red"}],{duration,easing:"cubic-bezier"===easing?`cubic-bezier(${cubicBezierValues.join(",")})`:"steps"===easing?`steps(${stepsValues.join(",")})`:easing,direction,iterations:iteration,delay,endDelay});return(0,react.useEffect)((()=>{animate.play()}),[duration,easing,cubicBezierValues,stepsValues,iteration,direction,delay]),react.createElement("div",null,react.createElement("svg",{width:600,height:300,viewBox:"0 0 600 300"},react.createElement("g",{transform:"translate(100, 100)"},react.createElement("g",{ref:animate,fontSize:"24px",fill:"dimgray"},react.createElement("text",null,"Hello world")))),react.createElement("div",null,react.createElement("button",{onClick:()=>animate.play()},"play"),react.createElement("button",{onClick:animate.pause},"pause"),react.createElement("button",{onClick:animate.reverse},"reverse"),react.createElement("button",{onClick:animate.finish},"finish")),react.createElement("div",null,react.createElement("label",null,"duration:",react.createElement("input",{type:"number",min:0,value:duration,onChange:e=>{setDuration(Number(e.target.value))}}),"ms")),react.createElement("div",null,react.createElement("label",null,"iteration:",react.createElement("input",{type:"number",min:1,value:iteration,onChange:e=>{setIteration(Number(e.target.value))}}))),react.createElement("div",null,"easing:",["linear","ease","ease-in","ease-out","ease-in-out"].map((v=>react.createElement("label",{key:v},react.createElement("input",{type:"radio",value:v,checked:easing===v,onChange:e=>{setEasing(e.target.value)}}),v))),react.createElement("label",null,react.createElement("input",{type:"radio",value:"cubic-bezier",checked:0===easing.indexOf("cubic-bezier"),onChange:e=>{setEasing(e.target.value)}}),"cubic-bezier(",cubicBezierValues.map(((v,i)=>react.createElement("input",{key:i,value:v,type:"number",step:.01,min:0,max:1,onChange:e=>{setEasing("cubic-bezier"),setCubicBezierValues((prev=>{const next=[...prev];return next[i]=Number(e.target.value),next}))}}))).reduce(((acc,v,i)=>(acc.push(v),i!==cubicBezierValues.length-1&&acc.push(","),acc)),[]),")"),react.createElement("label",null,react.createElement("input",{type:"radio",value:"steps",checked:0===easing.indexOf("steps"),onChange:e=>{setEasing(e.target.value)}}),"steps(",react.createElement("input",{type:"number",step:1,min:1,value:stepsValues[0],onChange:e=>{setEasing("steps"),setStepsValues((prev=>[Number(e.target.value),prev[1]]))}}),",",react.createElement("select",{value:stepsValues[1],onChange:e=>{setEasing("steps"),setStepsValues((prev=>[prev[0],e.target.value]))}},["jump-start","jump-end","jump-none","jump-both","start","end"].map((v=>react.createElement("option",{key:v,value:v},v)))),")")),react.createElement("div",null,"direction:",["normal","reverse","alternate","alternate-reverse"].map((v=>react.createElement("label",{key:v},react.createElement("input",{type:"radio",value:v,checked:direction===v,onChange:e=>{setDirection(e.target.value)}}),v)))),react.createElement("div",null,react.createElement("label",null,"delay:",react.createElement("input",{type:"number",min:0,value:delay,onChange:e=>{setDelay(Number(e.target.value))}}),"ms")),react.createElement("div",null,react.createElement("label",null,"endDelay:",react.createElement("input",{type:"number",min:0,value:endDelay,onChange:e=>{setEndDelay(Number(e.target.value))}}),"ms")),react.createElement("div",null,react.createElement("label",null,"time:",react.createElement("input",{type:"range",defaultValue:"0",min:0,max:100,onChange:e=>{animate.setTime((end=>end*(Number(e.target.value)/100)))}}))),react.createElement("div",null,react.createElement("label",null,"playback rate:",react.createElement("input",{type:"number",min:-100,max:100,defaultValue:1,onChange:e=>{animate.setPlaybackRate(Number(e.target.value))}}))))}},Bar=({value,i,height,keep})=>{const target={height:`${value}px`,transform:`translateY(-${value}px)`,opacity:String(1-.025*i)},animate=(0,src.useAnimation)(keep?prev=>[{height:prev.height,transform:prev.transform,opacity:prev.opacity},target]:[target],{duration:150,easing:"ease-out",delay:100*i});return(0,react.useEffect)((()=>{animate.play()}),[value,keep]),react.createElement("rect",{ref:animate,x:20*i,y:height,width:18,height:0,opacity:target.opacity,fill:"steelblue"})},Bars={render:()=>{const init=()=>Array.from({length:30}).map((()=>300*Math.random()**2)),[rects,setRects]=(0,react.useState)(init),[keep,setKeep]=(0,react.useState)(!1),refresh=()=>setRects(init());return react.createElement(react.Fragment,null,react.createElement("div",null,react.createElement("button",{onClick:refresh},"refresh"),react.createElement("label",null,react.createElement("input",{type:"checkbox",checked:keep,onChange:e=>{setKeep(e.target.checked),refresh()}}),"keep")),react.createElement("div",null,react.createElement("svg",{width:800,height:400},react.createElement("g",{transform:"translate(10,10)"},rects.map(((v,i)=>react.createElement(Bar,{key:i,i,value:v,height:380,keep})))))))}},Mouse={render:()=>{const rotate=(0,src.useAnimation)([{transform:"rotate(0deg)",borderRadius:"1rem"},{transform:"rotate(360deg)",borderRadius:"50%"},{transform:"rotate(720deg)",borderRadius:"1rem"}],{duration:1e3,iterations:1/0,easing:"ease-in-out"}),move=(0,src.useAnimation)(((prev,pos)=>[{transform:prev.transform},{transform:`translate(${pos.x}px, ${pos.y}px)`}]),{duration:400,easing:"ease-in-out"});return(0,react.useEffect)((()=>{rotate.play();const onPointerMove=((fn,ms)=>{let id=null;return(...args)=>{null!=id&&clearTimeout(id),id=setTimeout((()=>{id=null,fn(...args)}),ms)}})((e=>{move.play({args:{x:e.clientX,y:e.clientY}})}),100);return window.addEventListener("pointermove",onPointerMove),()=>{window.removeEventListener("pointermove",onPointerMove)}}),[]),react.createElement("div",null,react.createElement("div",null,"Move mouse cursor."),react.createElement("div",{ref:move},react.createElement("div",{ref:rotate,style:{position:"fixed",border:"solid 0.1rem #135569",height:"6rem",width:"6rem",top:"-3rem",left:"-3rem"}})))}},Toggle={render:()=>{const animate=(0,src.useAnimation)({transform:"translate3d(400px, 0, 0)"},{duration:800,easing:"ease-in-out"});return(0,react.useEffect)((()=>{animate.play()}),[animate]),react.createElement("div",null,react.createElement("button",{onClick:animate.reverse},"Toggle"),react.createElement("div",{className:"rail"},react.createElement("div",{ref:animate,className:"block"})),react.createElement("style",null,"\n.rail {\n  border-radius: 4px;\n  background-color: rgb(240, 240, 232);\n  position: relative;\n  margin: 5px 3px 10px;\n  width: 450px;\n  height: 50px;\n}\n.block {\n  position: absolute;\n  width: 50px;\n  height: 50px;\n  border-radius: 4px;\n  background-color: rgb(130, 181, 198);\n}\n"))}},Path={render:()=>{const animate=(0,src.useAnimation)([{d:"path('M50,50L150,50L150,150L50,150z')"},{d:"path('M100,30L170,170L30,170L30,170z')"}],{duration:1e3,easing:"ease-in-out",iterations:1/0,direction:"alternate"});(0,react.useEffect)((()=>{animate.play()}),[]);return react.createElement("svg",{width:400,height:300,viewBox:"0 0 400 300"},react.createElement("path",{ref:animate,fill:"orange"}))}},ThreeDimentional={render:()=>{const[pos,setPos]=(0,react.useState)({x:1,y:1}),animate=(0,src.useAnimation)({transform:`rotate3d(${pos.y/100}, ${pos.x/100}, 0, 360deg)`},{duration:1e3,iterations:1/0});return(0,react.useEffect)((()=>{animate.play()}),[pos]),(0,react.useEffect)((()=>{const onPointerMove=e=>{setPos({x:e.clientX,y:e.clientY})};return window.addEventListener("pointermove",onPointerMove),()=>{window.removeEventListener("pointermove",onPointerMove)}}),[]),react.createElement(react.Fragment,null,react.createElement("div",{ref:animate,style:{width:100,height:100,margin:100,transformStyle:"preserve-3d"}},react.createElement("div",{className:"face front"}),react.createElement("div",{className:"face back"}),react.createElement("div",{className:"face right"}),react.createElement("div",{className:"face left"}),react.createElement("div",{className:"face top"}),react.createElement("div",{className:"face bottom"})),react.createElement("style",null,"\n            .face {\n              display: flex;\n              align-items: center;\n              justify-content: center;\n              width: 100%;\n              height: 100%;\n              position: absolute;\n              backface-visibility: inherit;\n              font-size: 60px;\n              color: #fff;\n            }\n            .front {\n              background: rgba(90,90,90,.7);\n              transform: translateZ(50px);\n            }\n            .back {\n              background: rgba(0,210,0,.7);\n              transform: rotateY(180deg) translateZ(50px);\n            }\n            .right {\n              background: rgba(210,0,0,.7);\n              transform: rotateY(90deg) translateZ(50px);\n            }\n            .left {\n              background: rgba(0,0,210,.7);\n              transform: rotateY(-90deg) translateZ(50px);\n            }\n            .top {\n              background: rgba(210,210,0,.7);\n              transform: rotateX(90deg) translateZ(50px);\n            }\n            .bottom {\n              background: rgba(210,0,210,.7);\n              transform: rotateX(-90deg) translateZ(50px);\n            }\n            "))},name:"3D"},Sequence={render:()=>{const animate=(0,src.useAnimation)(((prev,color)=>[{fill:prev.fill},{fill:color}]),{duration:600,easing:"ease-out"}),onClickAll=(0,react.useCallback)((async()=>{try{await animate.play({args:"red"}).waitFor("finish"),await animate.play({args:"blue"}).waitFor("finish"),await animate.play({args:"green"}).waitFor("finish")}catch(e){}}),[]);return(0,react.useEffect)((()=>{onClickAll()}),[]),react.createElement("div",null,react.createElement("svg",{width:150,height:150},react.createElement("path",{ref:animate,d:"M 10,30 A 20,20 0,0,1 50,30 A 20,20 0,0,1 90,30 Q 90,60 50,90 Q 10,60 10,30 z"})),react.createElement("div",null,react.createElement("button",{onClick:()=>{animate.play({args:"red"})}},"Red"),react.createElement("button",{onClick:()=>{animate.play({args:"blue"})}},"Blue"),react.createElement("button",{onClick:()=>{animate.play({args:"green"})}},"Green"),react.createElement("button",{onClick:onClickAll},"All")))}},WavedRect=({i})=>{const baseTiming={easing:"ease-in-out",iterations:1/0,direction:"alternate",delay:98*i},move=(0,src.useAnimation)([{transform:"translateY(0) scaleX(.8)"},{transform:"translateY(95vh) scaleX(1)"}],{...baseTiming,duration:2500}),opacity=(0,src.useAnimation)([{opacity:1},{opacity:0}],{...baseTiming,duration:2e3}),color=(0,src.useAnimation)([{backgroundColor:"rgb(239, 239, 255)"},{backgroundColor:"#e4c349"}],{...baseTiming,duration:3e3});return(0,react.useEffect)((()=>{move.play(),opacity.play(),color.play()}),[]),react.createElement("div",{ref:o([move,opacity,color]),style:{width:"5vw",height:"2.5vh",background:"#efefff",borderRadius:"1vh"}})},Wave={render:()=>{const[rects]=(0,react.useState)((()=>Array.from({length:20}).map(((_,i)=>i))));return react.createElement("div",{style:{background:"#e45349",width:"100vw",height:"100vh",display:"flex",justifyContent:"center"}},rects.map((i=>react.createElement(WavedRect,{key:i,i}))))}},Countdown={render:()=>{const[count,setCount]=(0,react.useState)(10),countAnimation=(0,src.useAnimation)([{opacity:1,transform:"scale(.6)"},{opacity:.5,transform:"scale(1)"}],{duration:500,easing:"linear",delay:0,iterations:1e3,direction:"alternate"}),boomAnimation=(0,src.useAnimation)([{opacity:0,transform:"scale(.01) rotate(0deg)",color:"white",offset:0},{opacity:1,transform:"scale(6) rotate(360deg)",color:"orange",offset:.8},{opacity:1,transform:"scale(1) rotate(720deg)",color:"white",offset:1}],{duration:2e3,easing:"ease-out",delay:0,iterations:1});return(0,react.useEffect)((()=>{countAnimation.play();let startCount=count;const id=setInterval((()=>{startCount-=1,setCount((p=>p-1)),startCount>0?countAnimation.setPlaybackRate((prev=>Math.min(1.15*prev,6))):(clearInterval(id),boomAnimation.play())}),1e3);return()=>{clearInterval(id)}}),[]),react.createElement("div",{style:{background:"gray",width:400,height:400,display:"flex",alignItems:"center",justifyContent:"center"}},react.createElement("span",{ref:o([countAnimation,boomAnimation]),style:{color:"white",fontSize:64,fontWeight:"bold"}},count))}},__namedExportsOrder=["Playground","Bars","Mouse","Toggle","Path","ThreeDimentional","Sequence","Wave","Countdown"]},"./node_modules/react/cjs/react-jsx-runtime.production.min.js":(__unused_webpack_module,exports,__webpack_require__)=>{var f=__webpack_require__("./node_modules/react/index.js"),k=Symbol.for("react.element"),l=Symbol.for("react.fragment"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};function q(c,a,g){var b,d={},e=null,h=null;for(b in void 0!==g&&(e=""+g),void 0!==a.key&&(e=""+a.key),void 0!==a.ref&&(h=a.ref),a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l,exports.jsx=q,exports.jsxs=q},"./node_modules/react/jsx-runtime.js":(module,__unused_webpack_exports,__webpack_require__)=>{module.exports=__webpack_require__("./node_modules/react/cjs/react-jsx-runtime.production.min.js")},"./src/core/index.ts":()=>{},"./src/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{TransitionGroup:()=>_react__WEBPACK_IMPORTED_MODULE_1__.TransitionGroup,useAnimation:()=>_react__WEBPACK_IMPORTED_MODULE_1__.useAnimation,useAnimationFunction:()=>_react__WEBPACK_IMPORTED_MODULE_1__.useAnimationFunction,useScrollTimeline:()=>_react__WEBPACK_IMPORTED_MODULE_1__.useScrollTimeline,useTransitionAnimation:()=>_react__WEBPACK_IMPORTED_MODULE_1__.useTransitionAnimation,useViewTimeline:()=>_react__WEBPACK_IMPORTED_MODULE_1__.useViewTimeline});var _core__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/core/index.ts");__webpack_require__.o(_core__WEBPACK_IMPORTED_MODULE_0__,"TransitionGroup")&&__webpack_require__.d(__webpack_exports__,{TransitionGroup:function(){return _core__WEBPACK_IMPORTED_MODULE_0__.TransitionGroup}}),__webpack_require__.o(_core__WEBPACK_IMPORTED_MODULE_0__,"useAnimation")&&__webpack_require__.d(__webpack_exports__,{useAnimation:function(){return _core__WEBPACK_IMPORTED_MODULE_0__.useAnimation}}),__webpack_require__.o(_core__WEBPACK_IMPORTED_MODULE_0__,"useAnimationFunction")&&__webpack_require__.d(__webpack_exports__,{useAnimationFunction:function(){return _core__WEBPACK_IMPORTED_MODULE_0__.useAnimationFunction}}),__webpack_require__.o(_core__WEBPACK_IMPORTED_MODULE_0__,"useScrollTimeline")&&__webpack_require__.d(__webpack_exports__,{useScrollTimeline:function(){return _core__WEBPACK_IMPORTED_MODULE_0__.useScrollTimeline}}),__webpack_require__.o(_core__WEBPACK_IMPORTED_MODULE_0__,"useTransitionAnimation")&&__webpack_require__.d(__webpack_exports__,{useTransitionAnimation:function(){return _core__WEBPACK_IMPORTED_MODULE_0__.useTransitionAnimation}}),__webpack_require__.o(_core__WEBPACK_IMPORTED_MODULE_0__,"useViewTimeline")&&__webpack_require__.d(__webpack_exports__,{useViewTimeline:function(){return _core__WEBPACK_IMPORTED_MODULE_0__.useViewTimeline}});var _react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/react/index.ts")},"./src/react/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{TransitionGroup:()=>TransitionGroup,useAnimation:()=>useAnimation,useAnimationFunction:()=>useAnimationFunction,useScrollTimeline:()=>useScrollTimeline,useTransitionAnimation:()=>useTransitionAnimation,useViewTimeline:()=>useViewTimeline});var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js"),react=__webpack_require__("./node_modules/react/index.js");const noop=()=>{},utils_getKeys=Object.keys,utils_assign=Object.assign,isArray=Array.isArray,isSameObject=(target={},prev={})=>{const keys=utils_getKeys(target);return keys.length===utils_getKeys(prev).length&&keys.every((k=>target[k]===prev[k]))},toMap=elements=>elements.reduce(((acc,e,i)=>(acc[e.key||i]=e,acc)),{}),TransitionStateContext=(0,react.createContext)("update"),TransitionNotifierContext=(0,react.createContext)(noop),Provider=({_state:state,_element:element})=>{const[show,setShow]=(0,react.useState)(!0),hasExitRef=(0,react.useRef)(!1),showChildren="exit"!==state||!!hasExitRef.current&&show;return(0,react.useEffect)((()=>{"enter"===state&&setShow(!0)}),[state]),(0,jsx_runtime.jsx)(TransitionStateContext.Provider,{value:state,children:(0,jsx_runtime.jsx)(TransitionNotifierContext.Provider,{value:(0,react.useCallback)((s=>{2===s?setShow(!1):hasExitRef.current=1===s}),[]),children:showChildren?element:null})})},TransitionGroup=({children})=>{const elemsRef=(0,react.useRef)(null),prevElems=elemsRef.current||[],elems=react.Children.map(children,(c=>c));(0,react.useEffect)((()=>{elemsRef.current=elems}));const elemsByKey=toMap(elems),prevElemsByKey=toMap(prevElems),res=[];return prevElems.forEach(((v,i)=>{const key=v.key||i;elemsByKey[key]?res.push((0,jsx_runtime.jsx)(Provider,{_state:"update",_element:elemsByKey[key]},key)):res.push((0,jsx_runtime.jsx)(Provider,{_state:"exit",_element:v},key))})),elems.forEach(((v,i)=>{const key=v.key||i;prevElemsByKey[key]||res.push((0,jsx_runtime.jsx)(Provider,{_state:"enter",_element:v},key))})),(0,jsx_runtime.jsx)(react.Fragment,{children:res})},createAnimation=(el,keyframes,options,timeline)=>{const modifiedOptions={fill:"both",...options};try{return new Animation(new KeyframeEffect(el,keyframes,modifiedOptions),timeline)}catch(e){return el.animate(keyframes,modifiedOptions)}},_play=(animation,opts={})=>{animation.playbackRate<0&&"finished"===animation.playState&&_setRate(animation,(p=>-p)),opts.restart&&_setTime(animation,0),animation.play()},_reverse=animation=>{animation&&animation.reverse()},_cancel=animation=>{animation&&animation.cancel()},_finish=animation=>{animation&&animation.finish()},_pause=animation=>{animation&&animation.pause()},_setTime=(animation,arg)=>{animation&&(animation.currentTime="function"==typeof arg?arg(animation.effect.getComputedTiming().endTime):arg)},_setRate=(animation,arg)=>{animation&&animation.updatePlaybackRate("function"==typeof arg?arg(animation.playbackRate):arg)},_waitFor=(animation,name)=>animation?new Promise((resolve=>{animation.onfinish=()=>{("finish"===name&&animation.playbackRate>0||"reverseFinish"===name&&animation.playbackRate<0)&&resolve()}})):Promise.resolve(),useStatic=init=>{const ref=(0,react.useRef)();return ref.current||(ref.current=init())},useIsomorphicLayoutEffect="undefined"!=typeof window?react.useLayoutEffect:react.useEffect,useLatestRef=value=>{const ref=(0,react.useRef)(value);return useIsomorphicLayoutEffect((()=>{ref.current=value}),[value]),ref},animations=new WeakMap,getAnimation=target=>animations.get(target),isEqual=(a,b)=>{return target=a._keyframes,prev=b._keyframes,target.length===prev.length&&target.every(((t,i)=>isSameObject(t,prev[i])))&&isSameObject(a._options,b._options);var target,prev},normalizeKeyframe=(el,keyframe,args)=>{return"function"==typeof keyframe?keyframe(getComputedStyle(el),args):isArray(items=keyframe)?items:[items];var items},useAnimation=(...args)=>{const argsRef=useLatestRef(args),[handle,mount]=useStatic((()=>{let _active,_target=null;const init=args2=>{if(!_target)return;const[keyframe,_options={}]=argsRef.current,{timeline,...options}=_options,prevActive=_active;return((el,target,prevTarget)=>{const prevAnimation=prevTarget&&getAnimation(prevTarget);if(prevAnimation){if(animations.delete(prevTarget),isEqual(target,prevTarget))return animations.set(target,prevAnimation),prevAnimation;prevAnimation.cancel()}const animation=createAnimation(el,target._keyframes,target._options,target._timeline);return animations.set(target,animation),animation})(_target,_active={_keyframes:normalizeKeyframe(_target,keyframe,args2),_options:options,_timeline:timeline?._get()},prevActive)},clean=()=>{var target;_active&&(target=_active,getAnimation(target)?.cancel(),animations.delete(target))},externalHandle=utils_assign((ref=>{(_target=ref)||clean()}),{play:(...opts)=>{const animation=init((opts[0]||{}).args);return animation&&_play(animation),externalHandle},reverse:()=>(_active&&_reverse(getAnimation(_active)),externalHandle),cancel:()=>(_active&&_cancel(getAnimation(_active)),externalHandle),finish:()=>(_active&&_finish(getAnimation(_active)),externalHandle),pause:()=>(_active&&_pause(getAnimation(_active)),externalHandle),setTime:time=>{let animation=_active&&getAnimation(_active);if(!animation){const[keyframe]=argsRef.current;if("function"==typeof keyframe)return externalHandle;animation=init(void 0)}return _setTime(animation,time),externalHandle},setPlaybackRate:rate=>(_active&&_setRate(getAnimation(_active),rate),externalHandle),waitFor:event=>_waitFor(_active&&getAnimation(_active),event).then((()=>externalHandle))});return[externalHandle,()=>clean]}));return(0,react.useEffect)(mount,[]),handle},bindUpdateFunction=(animation,getUpdateFunction,args)=>{const update=()=>{const timing=animation.effect?.getComputedTiming();if(!timing)return;null!=timing.progress&&getUpdateFunction()(timing,args),"running"===animation.playState&&requestAnimationFrame(update)};animation.ready.then(update)},useAnimationFunction=(onUpdate,options)=>{const onUpdateRef=useLatestRef(onUpdate),optionsRef=useLatestRef(options),[handle,cleanup]=useStatic((()=>{const getOnUpdate=()=>onUpdateRef.current;let cache;const initAnimation=(opts={})=>{const options2=optionsRef.current;if(cache){const[prevAnimation,prevOptions]=cache;if(isSameObject(options2,prevOptions))return"running"!==prevAnimation.playState&&bindUpdateFunction(prevAnimation,getOnUpdate,opts.args),prevAnimation;prevAnimation.cancel()}const animation=createAnimation(null,null,options2);return bindUpdateFunction(animation,getOnUpdate,opts.args),cache=[animation,options2],animation},getAnimation=()=>cache?.[0],externalHandle={play:(...opts)=>(_play(initAnimation(opts[0]),opts[0]),externalHandle),reverse:()=>(_reverse(initAnimation()),externalHandle),cancel:()=>(_cancel(getAnimation()),externalHandle),finish:()=>(_finish(getAnimation()),externalHandle),pause:()=>(_pause(getAnimation()),externalHandle),setTime:time=>(_setTime(getAnimation(),time),externalHandle),setPlaybackRate:rate=>(_setRate(getAnimation(),rate),externalHandle),waitFor:event=>_waitFor(getAnimation(),event).then((()=>externalHandle))};return[externalHandle,externalHandle.cancel]}));return(0,react.useEffect)((()=>cleanup),[]),handle},useTransitionAnimation=keyframes=>{const keys=utils_getKeys(keyframes),animations=keys.reduce(((acc,k)=>{const def=keyframes[k];return def?(acc[k]=useAnimation(def[0],def[1]),acc):acc}),{}),animationsRef=useLatestRef(animations),[animation,cleanup]=useStatic((()=>{const forAllHandle=fn=>{utils_getKeys(animationsRef.current).forEach((name=>fn(animationsRef.current[name])))};return[ref=>{forAllHandle((h=>{h(ref)}))},()=>{forAllHandle((handle=>{handle.cancel()}))}]}));(0,react.useEffect)((()=>cleanup),[]);const currentState=(0,react.useContext)(TransitionStateContext),notify=(0,react.useContext)(TransitionNotifierContext);return useIsomorphicLayoutEffect((()=>{keys.includes("exit")?notify(1):notify(0)}),keys),useIsomorphicLayoutEffect((()=>{"update"===currentState&&animationsRef.current[currentState]?.play()})),useIsomorphicLayoutEffect((()=>{"update"!==currentState&&animationsRef.current[currentState]?.play().waitFor("finish").then((()=>{"exit"===currentState&&notify(2)})).catch(noop)}),[currentState]),animation},useScrollTimeline=(opts={})=>{const optsRef=useLatestRef(opts);return useStatic((()=>{let _target;return utils_assign((ref=>{_target=ref}),{_type:1,_get:()=>{const{axis}=optsRef.current;return new ScrollTimeline({source:_target||document.documentElement,axis})}})}))},useViewTimeline=(opts={})=>{const optsRef=useLatestRef(opts);return useStatic((()=>{let _target;return utils_assign((ref=>{_target=ref}),{_type:2,_get:()=>{const{axis,inset}=optsRef.current;return new ViewTimeline({subject:_target||document.documentElement,axis,inset})}})}))}}}]);